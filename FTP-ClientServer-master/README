================================================================

    README file for Assignment 3 - FTP Protocol

     Names and roll numbers:	Gowthami Gudipati(11012312) and Tanya Goyal(11012340)
     Department:	Mathematics & Computing 
 
================================================================

HOW TO USE THE FTP PROTOCOL
===========================
1. Copy all the files in one directory.

2. On the terminal:
	~$ cd <path-to-main-directory>
	~$ make
	
	At server side:
	~$ cd <path-to-server-directory>
	~$ ./server <port number>
	
	--> The server should start listening for connections on the specified port.
	
	At client side:
	~$ cd <path-to-client-directory>
	~$ ./client <IP address of server> <port number>

3. Use the following commands:

	ftp>put <filename> 		(to upload a file named filename to the server) 
	ftp>get <filename> 		(to download a file named filename from the server)
	ftp>ls 					(to list the files under the present directory of the server) 
	ftp>cd <directory> 		(to change the present working directory of the server)
	ftp>pwd 				(to display the present working directory of the server)
	ftp>!ls 				(to list the files under the present directory of the client) 
	ftp>!cd <directory> 	(to change the present directory of the client) 
	ftp>!pwd 				(to display the present working directory of the client) 
	ftp>quit 				(to quit from ftp session at the client and return to Unix prompt) 


EXIT 
====
* 可以在服务端使用Ctrl+C退出
* 可以在客户端输入quit退出

限制
===========
* 仅仅实现了上述命令
* 最多支持8个客户端同时连接服务端
* 目录中不要包含空格，cd命令采用chdir()实现的，不允许包含空格。
* 如果文件已经存在目录中，get将重写该文件，类似的put也将重写该文件。

特性
========
* 只能接受上诉的命令，否则将返回一个"无效FTP命令"的错误。
* 解析命令并在终端上打印适当的输出。
* 在执行get和put命令时，告诉适当的进程（客户端/服务器）文件的大小。
* 工作面向远程连接和并发服务模式。

实现细节
=======================
1. server.cpp时实现FTP协议服务端的文件，具体如下：
 	
	*  创建套接字并将其绑定到端口（指定cmd-line参数）
	*  开始监听套接字
	*  接受来自客户端的连接
	*  从客户端接受FTP命令
	*  解析FTP命令并检查错误和不支持的命令。 如果请求中出现错误，则将错误发送给客户端。
	*  所有的命令都是shell命令。他们被转换为有效格式并执行（由客户端/服务器根据请求执行）
	*  在使用get命令时，检查适当的文件并通过数据连接（数据端口由服务器生成）以块的形式发送给客户机
	*  如果使用put命令，则通过数据连接（数据端口由服务器生成）从客户机以块的形式接受文件
	*  使用ls命令，我们使用popen("ls","r")并且发送数据连接（数据端口由服务器生成）以块的形式发送文件列表（因为文件列表可能很大）
	*  在使用cd命令中，我们使用chdir()来更改服务器的工作目录。
	*  对于pwd命令，如果是windows机器，我们使用_getcwd来获取服务器当前工作目录的路径发送给客户端。
	*  如果接收到来自客户端的“退出”命令，则关闭与客户端的连接。
	*  等待新连接并重复上述过程。

2. client.cpp是实现FTP协议客户端的文件，具体如下：

	*  创建套接字，并通过服务器和端口的IP地址（指定为cmd-line参数）连接到服务器。
	*  解析FTP命令并检查错误和不支持的命令。如果请求中出现错误，则打印错误。
	*  所有的命令都是shell命令。他们被转换为有效格式并执行（由客户端/服务器根据请求执行）。
	*  在使用get命令时，通过数据连接（数据端口由服务器生成）从服务器以块的形式接受的文件。
	*  对于put命令，检查适当的文件并通过数据连接（数据端口由服务器生成）以块的形式发送到服务器。
	*  对于ls命令，我们通过数据连接（同样，数据端口由服务器生成）以块的形式接受文件列表（因为文件的列表可能很大）。
	*  在使用!ls命令，我们使用system("ls")打印客户工作目录下的文件列表。
	*  对于!cd命令，我们使用chdir()来更改客户端的工作目录。
	*  在使用!pwd命令的情况下，如果时windows机器，我们使用_getcwd,否则使用getcwd来获取客户机当前工作目录的路径。
	*  如果客户端收到"quit"命令，返回Unix提示符。


SAMPLE TEST
============
1) Initializing the connection:
	Server Side:								Client Side:
	~$./server 2000								
	Server running...waiting for connections.				~$./client 127.0.0.1 2000
	Received request...							ftp>
	Child created for dealing with client requests				
	
2) ls
	Client Side:								Server Side:
	ftp>ls									String received from client: ls
	sample
	server
	server.cpp
	server.o

3) !ls
	Client Side:								Server Side:
	ftp>!ls									String received from client: !ls
	client	client.cpp  client.o  temp

4) put 
	Client Side:								Server Side:
	ftp>put temp								String received from client: put temp
	File upload done.							Filename given is: temp
										File download done.
	
5) get
	Client Side:								Server Side:
	ftp>get sample								String received from client: get sample
	File download done.							Filename given is: sample
										File upload done.
6) pwd
	Client Side:								Server Side:
	ftp>pwd									String received from client: pwd
	/home/goyal/ftp/Server							

7) !pwd
	Client Side:								Server Side:
	ftp>!pwd								String received from client: !pwd	
	/home/goyal/ftp/Client	

6) cd
	Client Side:								Server Side:
	ftp>cd ../Client							String received from client: cd ../Client
	Path given is: ../Client						Path given is: ../Client

7) !cd
	Client Side:								Server Side:
	ftp>!cd ../Server							String received from client: !cd ../Server
	Path given is: ../Server						Path given is: ../Server

8) quit
	Client Side:								Server Side:
	ftp>quit								String received from client: quit
										The client has quit

	

